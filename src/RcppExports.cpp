// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// remg
Rcpp::NumericVector remg(int n, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, Rcpp::NumericVector lambda);
RcppExport SEXP seqmodels_remg(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda(lambdaSEXP);
    __result = Rcpp::wrap(remg(n, mu, sigma, lambda));
    return __result;
END_RCPP
}
// demg
Rcpp::NumericVector demg(Rcpp::NumericVector x, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, Rcpp::NumericVector lambda, bool ln);
RcppExport SEXP seqmodels_demg(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP lnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    __result = Rcpp::wrap(demg(x, mu, sigma, lambda, ln));
    return __result;
END_RCPP
}
// pemg
Rcpp::NumericVector pemg(Rcpp::NumericVector q, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, Rcpp::NumericVector lambda, bool ln, bool lower_tail);
RcppExport SEXP seqmodels_pemg(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP lnSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    __result = Rcpp::wrap(pemg(q, mu, sigma, lambda, ln, lower_tail));
    return __result;
END_RCPP
}
// qemg
Rcpp::NumericVector qemg(Rcpp::NumericVector p, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, Rcpp::NumericVector lambda, Rcpp::NumericVector bounds, double em_stop, double err);
RcppExport SEXP seqmodels_qemg(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP boundsSEXP, SEXP em_stopSEXP, SEXP errSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< double >::type em_stop(em_stopSEXP);
    Rcpp::traits::input_parameter< double >::type err(errSEXP);
    __result = Rcpp::wrap(qemg(p, mu, sigma, lambda, bounds, em_stop, err));
    return __result;
END_RCPP
}
// memg
Rcpp::DataFrame memg(Rcpp::NumericVector mu, Rcpp::NumericVector sigma, Rcpp::NumericVector lambda);
RcppExport SEXP seqmodels_memg(SEXP muSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda(lambdaSEXP);
    __result = Rcpp::wrap(memg(mu, sigma, lambda));
    return __result;
END_RCPP
}
// rexwald
Rcpp::NumericVector rexwald(int n, Rcpp::NumericVector kappa, Rcpp::NumericVector xi, Rcpp::NumericVector tau);
RcppExport SEXP seqmodels_rexwald(SEXP nSEXP, SEXP kappaSEXP, SEXP xiSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    __result = Rcpp::wrap(rexwald(n, kappa, xi, tau));
    return __result;
END_RCPP
}
// dexwald
Rcpp::NumericVector dexwald(Rcpp::NumericVector t, Rcpp::NumericVector kappa, Rcpp::NumericVector xi, Rcpp::NumericVector tau, bool ln, bool ni);
RcppExport SEXP seqmodels_dexwald(SEXP tSEXP, SEXP kappaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP lnSEXP, SEXP niSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< bool >::type ni(niSEXP);
    __result = Rcpp::wrap(dexwald(t, kappa, xi, tau, ln, ni));
    return __result;
END_RCPP
}
// rfrechet
Rcpp::NumericVector rfrechet(int N, Rcpp::NumericVector alpha, Rcpp::NumericVector mu);
RcppExport SEXP seqmodels_rfrechet(SEXP NSEXP, SEXP alphaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    __result = Rcpp::wrap(rfrechet(N, alpha, mu));
    return __result;
END_RCPP
}
// dfrechet
Rcpp::NumericVector dfrechet(Rcpp::NumericVector t, Rcpp::NumericVector alpha, Rcpp::NumericVector mu, int ln);
RcppExport SEXP seqmodels_dfrechet(SEXP tSEXP, SEXP alphaSEXP, SEXP muSEXP, SEXP lnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type ln(lnSEXP);
    __result = Rcpp::wrap(dfrechet(t, alpha, mu, ln));
    return __result;
END_RCPP
}
// pfrechet
Rcpp::NumericVector pfrechet(Rcpp::NumericVector t, Rcpp::NumericVector alpha, Rcpp::NumericVector mu);
RcppExport SEXP seqmodels_pfrechet(SEXP tSEXP, SEXP alphaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    __result = Rcpp::wrap(pfrechet(t, alpha, mu));
    return __result;
END_RCPP
}
// qfrechet
Rcpp::NumericVector qfrechet(Rcpp::NumericVector p, Rcpp::NumericVector alpha, Rcpp::NumericVector mu);
RcppExport SEXP seqmodels_qfrechet(SEXP pSEXP, SEXP alphaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    __result = Rcpp::wrap(qfrechet(p, alpha, mu));
    return __result;
END_RCPP
}
// rlba_1acc
Rcpp::NumericVector rlba_1acc(int N, Rcpp::NumericVector A, Rcpp::NumericVector b, Rcpp::NumericVector alpha, Rcpp::NumericVector beta, int ver);
RcppExport SEXP seqmodels_rlba_1acc(SEXP NSEXP, SEXP ASEXP, SEXP bSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP verSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type ver(verSEXP);
    __result = Rcpp::wrap(rlba_1acc(N, A, b, alpha, beta, ver));
    return __result;
END_RCPP
}
// plba_1acc
Rcpp::NumericVector plba_1acc(Rcpp::NumericVector t, Rcpp::NumericVector A, Rcpp::NumericVector b, Rcpp::NumericVector alpha, Rcpp::NumericVector beta, int ver);
RcppExport SEXP seqmodels_plba_1acc(SEXP tSEXP, SEXP ASEXP, SEXP bSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP verSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type ver(verSEXP);
    __result = Rcpp::wrap(plba_1acc(t, A, b, alpha, beta, ver));
    return __result;
END_RCPP
}
// dlba_1acc
Rcpp::NumericVector dlba_1acc(Rcpp::NumericVector t, Rcpp::NumericVector A, Rcpp::NumericVector b, Rcpp::NumericVector alpha, Rcpp::NumericVector beta, int ver, int ln);
RcppExport SEXP seqmodels_dlba_1acc(SEXP tSEXP, SEXP ASEXP, SEXP bSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP verSEXP, SEXP lnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type ver(verSEXP);
    Rcpp::traits::input_parameter< int >::type ln(lnSEXP);
    __result = Rcpp::wrap(dlba_1acc(t, A, b, alpha, beta, ver, ln));
    return __result;
END_RCPP
}
// qlba_1acc
Rcpp::NumericVector qlba_1acc(Rcpp::NumericVector p, Rcpp::NumericVector A, Rcpp::NumericVector b, Rcpp::NumericVector alpha, Rcpp::NumericVector beta, int ver, double mxT, int em_stop, double err);
RcppExport SEXP seqmodels_qlba_1acc(SEXP pSEXP, SEXP ASEXP, SEXP bSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP verSEXP, SEXP mxTSEXP, SEXP em_stopSEXP, SEXP errSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type ver(verSEXP);
    Rcpp::traits::input_parameter< double >::type mxT(mxTSEXP);
    Rcpp::traits::input_parameter< int >::type em_stop(em_stopSEXP);
    Rcpp::traits::input_parameter< double >::type err(errSEXP);
    __result = Rcpp::wrap(qlba_1acc(p, A, b, alpha, beta, ver, mxT, em_stop, err));
    return __result;
END_RCPP
}
// rlba
Rcpp::NumericMatrix rlba(int N, Rcpp::NumericVector A1, Rcpp::NumericVector b1, Rcpp::NumericVector alpha1, Rcpp::NumericVector beta1, Rcpp::NumericVector tau1, Rcpp::NumericVector A0, Rcpp::NumericVector b0, Rcpp::NumericVector alpha0, Rcpp::NumericVector beta0, Rcpp::NumericVector tau0, int rl, int ver);
RcppExport SEXP seqmodels_rlba(SEXP NSEXP, SEXP A1SEXP, SEXP b1SEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP tau1SEXP, SEXP A0SEXP, SEXP b0SEXP, SEXP alpha0SEXP, SEXP beta0SEXP, SEXP tau0SEXP, SEXP rlSEXP, SEXP verSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< int >::type rl(rlSEXP);
    Rcpp::traits::input_parameter< int >::type ver(verSEXP);
    __result = Rcpp::wrap(rlba(N, A1, b1, alpha1, beta1, tau1, A0, b0, alpha0, beta0, tau0, rl, ver));
    return __result;
END_RCPP
}
// dlba
Rcpp::NumericVector dlba(Rcpp::NumericVector rt, Rcpp::NumericVector ch, Rcpp::NumericVector A1, Rcpp::NumericVector b1, Rcpp::NumericVector alpha1, Rcpp::NumericVector beta1, Rcpp::NumericVector tau1, Rcpp::NumericVector A0, Rcpp::NumericVector b0, Rcpp::NumericVector alpha0, Rcpp::NumericVector beta0, Rcpp::NumericVector tau0, double rl, int ln, int ver);
RcppExport SEXP seqmodels_dlba(SEXP rtSEXP, SEXP chSEXP, SEXP A1SEXP, SEXP b1SEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP tau1SEXP, SEXP A0SEXP, SEXP b0SEXP, SEXP alpha0SEXP, SEXP beta0SEXP, SEXP tau0SEXP, SEXP rlSEXP, SEXP lnSEXP, SEXP verSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ch(chSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type rl(rlSEXP);
    Rcpp::traits::input_parameter< int >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< int >::type ver(verSEXP);
    __result = Rcpp::wrap(dlba(rt, ch, A1, b1, alpha1, beta1, tau1, A0, b0, alpha0, beta0, tau0, rl, ln, ver));
    return __result;
END_RCPP
}
// plba
Rcpp::NumericVector plba(Rcpp::NumericVector rt, Rcpp::NumericVector ch, Rcpp::NumericVector A1, Rcpp::NumericVector b1, Rcpp::NumericVector alpha1, Rcpp::NumericVector beta1, Rcpp::NumericVector tau1, Rcpp::NumericVector A0, Rcpp::NumericVector b0, Rcpp::NumericVector alpha0, Rcpp::NumericVector beta0, Rcpp::NumericVector tau0, double rl, double ver, int parYes);
RcppExport SEXP seqmodels_plba(SEXP rtSEXP, SEXP chSEXP, SEXP A1SEXP, SEXP b1SEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP tau1SEXP, SEXP A0SEXP, SEXP b0SEXP, SEXP alpha0SEXP, SEXP beta0SEXP, SEXP tau0SEXP, SEXP rlSEXP, SEXP verSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ch(chSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type rl(rlSEXP);
    Rcpp::traits::input_parameter< double >::type ver(verSEXP);
    Rcpp::traits::input_parameter< int >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(plba(rt, ch, A1, b1, alpha1, beta1, tau1, A0, b0, alpha0, beta0, tau0, rl, ver, parYes));
    return __result;
END_RCPP
}
// dlevy
Rcpp::NumericVector dlevy(Rcpp::NumericVector x, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, bool ln);
RcppExport SEXP seqmodels_dlevy(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    __result = Rcpp::wrap(dlevy(x, mu, sigma, ln));
    return __result;
END_RCPP
}
// plevy
Rcpp::NumericVector plevy(Rcpp::NumericVector q, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, bool lower_tail, bool ln);
RcppExport SEXP seqmodels_plevy(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP lnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    __result = Rcpp::wrap(plevy(q, mu, sigma, lower_tail, ln));
    return __result;
END_RCPP
}
// qlevy
Rcpp::NumericVector qlevy(Rcpp::NumericVector p, Rcpp::NumericVector mu, Rcpp::NumericVector sigma);
RcppExport SEXP seqmodels_qlevy(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(qlevy(p, mu, sigma));
    return __result;
END_RCPP
}
// rlevy
Rcpp::NumericVector rlevy(int n, Rcpp::NumericVector mu, Rcpp::NumericVector sigma);
RcppExport SEXP seqmodels_rlevy(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(rlevy(n, mu, sigma));
    return __result;
END_RCPP
}
// rinvgauss
Rcpp::NumericVector rinvgauss(int n, Rcpp::NumericVector kappa, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma);
RcppExport SEXP seqmodels_rinvgauss(SEXP nSEXP, SEXP kappaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(rinvgauss(n, kappa, xi, tau, sigma));
    return __result;
END_RCPP
}
// dinvgauss
Rcpp::NumericVector dinvgauss(Rcpp::NumericVector t, Rcpp::NumericVector kappa, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma, bool ln);
RcppExport SEXP seqmodels_dinvgauss(SEXP tSEXP, SEXP kappaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP lnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    __result = Rcpp::wrap(dinvgauss(t, kappa, xi, tau, sigma, ln));
    return __result;
END_RCPP
}
// pinvgauss
Rcpp::NumericVector pinvgauss(Rcpp::NumericVector t, Rcpp::NumericVector kappa, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma, bool ln, bool lower_tail);
RcppExport SEXP seqmodels_pinvgauss(SEXP tSEXP, SEXP kappaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP lnSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    __result = Rcpp::wrap(pinvgauss(t, kappa, xi, tau, sigma, ln, lower_tail));
    return __result;
END_RCPP
}
// qinvgauss
Rcpp::NumericVector qinvgauss(Rcpp::NumericVector p, Rcpp::NumericVector kappa, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma, double bounds, double em_stop, double err);
RcppExport SEXP seqmodels_qinvgauss(SEXP pSEXP, SEXP kappaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP boundsSEXP, SEXP em_stopSEXP, SEXP errSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< double >::type em_stop(em_stopSEXP);
    Rcpp::traits::input_parameter< double >::type err(errSEXP);
    __result = Rcpp::wrap(qinvgauss(p, kappa, xi, tau, sigma, bounds, em_stop, err));
    return __result;
END_RCPP
}
// minvgauss
Rcpp::DataFrame minvgauss(Rcpp::NumericVector kappa, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma);
RcppExport SEXP seqmodels_minvgauss(SEXP kappaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(minvgauss(kappa, xi, tau, sigma));
    return __result;
END_RCPP
}
// rwaldrace
Rcpp::DataFrame rwaldrace(int n, Rcpp::NumericVector k1, Rcpp::NumericVector x1, Rcpp::NumericVector t1, Rcpp::NumericVector k0, Rcpp::NumericVector x0, Rcpp::NumericVector t0, Rcpp::NumericVector s1, Rcpp::NumericVector s0, bool rl, bool parYes);
RcppExport SEXP seqmodels_rwaldrace(SEXP nSEXP, SEXP k1SEXP, SEXP x1SEXP, SEXP t1SEXP, SEXP k0SEXP, SEXP x0SEXP, SEXP t0SEXP, SEXP s1SEXP, SEXP s0SEXP, SEXP rlSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< bool >::type rl(rlSEXP);
    Rcpp::traits::input_parameter< bool >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(rwaldrace(n, k1, x1, t1, k0, x0, t0, s1, s0, rl, parYes));
    return __result;
END_RCPP
}
// dwaldrace
Rcpp::NumericVector dwaldrace(Rcpp::NumericVector rt, Rcpp::NumericVector ch, Rcpp::NumericVector k1, Rcpp::NumericVector x1, Rcpp::NumericVector t1, Rcpp::NumericVector k0, Rcpp::NumericVector x0, Rcpp::NumericVector t0, Rcpp::NumericVector s1, Rcpp::NumericVector s0, bool rl, bool ln, bool parYes);
RcppExport SEXP seqmodels_dwaldrace(SEXP rtSEXP, SEXP chSEXP, SEXP k1SEXP, SEXP x1SEXP, SEXP t1SEXP, SEXP k0SEXP, SEXP x0SEXP, SEXP t0SEXP, SEXP s1SEXP, SEXP s0SEXP, SEXP rlSEXP, SEXP lnSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ch(chSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< bool >::type rl(rlSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< bool >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(dwaldrace(rt, ch, k1, x1, t1, k0, x0, t0, s1, s0, rl, ln, parYes));
    return __result;
END_RCPP
}
// pwaldrace
Rcpp::NumericVector pwaldrace(Rcpp::NumericVector rt, Rcpp::NumericVector ch, Rcpp::NumericVector k1, Rcpp::NumericVector x1, Rcpp::NumericVector t1, Rcpp::NumericVector k0, Rcpp::NumericVector x0, Rcpp::NumericVector t0, Rcpp::NumericVector s1, Rcpp::NumericVector s0, bool rl, bool ln, bool lower_tail, bool parYes);
RcppExport SEXP seqmodels_pwaldrace(SEXP rtSEXP, SEXP chSEXP, SEXP k1SEXP, SEXP x1SEXP, SEXP t1SEXP, SEXP k0SEXP, SEXP x0SEXP, SEXP t0SEXP, SEXP s1SEXP, SEXP s0SEXP, SEXP rlSEXP, SEXP lnSEXP, SEXP lower_tailSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ch(chSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< bool >::type rl(rlSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(pwaldrace(rt, ch, k1, x1, t1, k0, x0, t0, s1, s0, rl, ln, lower_tail, parYes));
    return __result;
END_RCPP
}
// qwaldrace
Rcpp::NumericVector qwaldrace(Rcpp::NumericVector p, Rcpp::NumericVector ch, Rcpp::NumericVector k1, Rcpp::NumericVector x1, Rcpp::NumericVector t1, Rcpp::NumericVector k0, Rcpp::NumericVector x0, Rcpp::NumericVector t0, Rcpp::NumericVector s1, Rcpp::NumericVector s0, bool rl, double bounds, double em_stop, double err, bool parYes);
RcppExport SEXP seqmodels_qwaldrace(SEXP pSEXP, SEXP chSEXP, SEXP k1SEXP, SEXP x1SEXP, SEXP t1SEXP, SEXP k0SEXP, SEXP x0SEXP, SEXP t0SEXP, SEXP s1SEXP, SEXP s0SEXP, SEXP rlSEXP, SEXP boundsSEXP, SEXP em_stopSEXP, SEXP errSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ch(chSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< bool >::type rl(rlSEXP);
    Rcpp::traits::input_parameter< double >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< double >::type em_stop(em_stopSEXP);
    Rcpp::traits::input_parameter< double >::type err(errSEXP);
    Rcpp::traits::input_parameter< bool >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(qwaldrace(p, ch, k1, x1, t1, k0, x0, t0, s1, s0, rl, bounds, em_stop, err, parYes));
    return __result;
END_RCPP
}
// dwiener
Rcpp::NumericVector dwiener(Rcpp::NumericVector rt, Rcpp::NumericVector ch, Rcpp::NumericVector alpha, Rcpp::NumericVector theta, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma, bool ln, bool joint, double eps, bool parYes);
RcppExport SEXP seqmodels_dwiener(SEXP rtSEXP, SEXP chSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP lnSEXP, SEXP jointSEXP, SEXP epsSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ch(chSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< bool >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(dwiener(rt, ch, alpha, theta, xi, tau, sigma, ln, joint, eps, parYes));
    return __result;
END_RCPP
}
// pwiener
Rcpp::NumericVector pwiener(Rcpp::NumericVector rt, Rcpp::NumericVector ch, Rcpp::NumericVector alpha, Rcpp::NumericVector theta, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma, bool ln, bool joint, bool lower_tail, double eps, bool parYes);
RcppExport SEXP seqmodels_pwiener(SEXP rtSEXP, SEXP chSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP lnSEXP, SEXP jointSEXP, SEXP lower_tailSEXP, SEXP epsSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ch(chSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type ln(lnSEXP);
    Rcpp::traits::input_parameter< bool >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(pwiener(rt, ch, alpha, theta, xi, tau, sigma, ln, joint, lower_tail, eps, parYes));
    return __result;
END_RCPP
}
// qwiener
Rcpp::NumericVector qwiener(Rcpp::NumericVector p, Rcpp::NumericVector ch, Rcpp::NumericVector alpha, Rcpp::NumericVector theta, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma, bool joint, double eps, double bounds, double em_stop, double err, bool parYes);
RcppExport SEXP seqmodels_qwiener(SEXP pSEXP, SEXP chSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP jointSEXP, SEXP epsSEXP, SEXP boundsSEXP, SEXP em_stopSEXP, SEXP errSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ch(chSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< double >::type em_stop(em_stopSEXP);
    Rcpp::traits::input_parameter< double >::type err(errSEXP);
    Rcpp::traits::input_parameter< bool >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(qwiener(p, ch, alpha, theta, xi, tau, sigma, joint, eps, bounds, em_stop, err, parYes));
    return __result;
END_RCPP
}
// rwiener
Rcpp::DataFrame rwiener(int n, Rcpp::NumericVector alpha, Rcpp::NumericVector theta, Rcpp::NumericVector xi, Rcpp::NumericVector tau, Rcpp::NumericVector sigma, double eps, double bounds, double em_stop, double err, bool parYes);
RcppExport SEXP seqmodels_rwiener(SEXP nSEXP, SEXP alphaSEXP, SEXP thetaSEXP, SEXP xiSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP epsSEXP, SEXP boundsSEXP, SEXP em_stopSEXP, SEXP errSEXP, SEXP parYesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< double >::type em_stop(em_stopSEXP);
    Rcpp::traits::input_parameter< double >::type err(errSEXP);
    Rcpp::traits::input_parameter< bool >::type parYes(parYesSEXP);
    __result = Rcpp::wrap(rwiener(n, alpha, theta, xi, tau, sigma, eps, bounds, em_stop, err, parYes));
    return __result;
END_RCPP
}
