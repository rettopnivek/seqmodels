% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{dlevy}
\alias{dlevy}
\alias{plevy}
\alias{qlevy}
\alias{rlevy}
\title{The Levy Distribution}
\usage{
dlevy(x, mu, sigma, ln = FALSE)

plevy(q, mu, sigma, lower_tail = TRUE, ln = FALSE)

qlevy(p, mu, sigma)

rlevy(n, mu, sigma)
}
\arguments{
\item{x, q}{a vector of quantiles (must be greater than mu).}

\item{mu}{a vector of location parameters.}

\item{sigma}{a vector of scale parameters (sigma > 0).}

\item{ln}{logical; if \code{TRUE}, probabilities are given as
log(p).}

\item{lower_tail}{logical; if \code{TRUE} (default), probabilities
are \eqn{P(X \le x)} otherwise \eqn{P( X > x)}.}

\item{n}{the number of draws for random generation.}
}
\value{
\code{dlevy} gives the density, \code{plevy} gives the
distribution function, \code{qlevy} gives the quantile function
and \code{rlevy} generates random deviates.

The length of the result is determined by \code{n} for
\code{rlevy}, and is the maximum of the lengths of the numerical
arguments for the other functions.

The numerical arguments other than \code{n} are recycled to the
length of the result.
}
\description{
Density, distribution, random generation, and quantile functions
for the Levy distribution, where \code{mu} is a location parameter
and \code{sigma} is a scale parameter.
}
\section{Details}{

A Levy distribution, among other things, can describe the finishing
times for a one boundary wiener process when the drift rate is
fixed to zero.

The mean and variance for the Levy distribution are non-finite.
}

\section{References}{


Applebaum, D. (2010). Lectures on Levy processes and stochastic
  calculus, Braunschweig; Lecture 2: Levy processes. Retrieved from
  http://www.applebaum.staff.shef.ac.uk/Brauns2notes.pdf.

Siegrist, K. (1997). The Levy distribution. Retrieved from
  http://www.math.uah.edu/stat/special/Levy.html
}

\examples{
# Density
dlevy( x = 2.199, mu = 0.0, sigma = 1.0 )
# Distribution function
plevy( q = 2.199, mu = 0.0, sigma = 1.0 )
# Quantile function
qlevy( p = .5, mu = 0.0, sigma = 1.0 )

# Simulations
sim <- rlevy( n = 1000, mu = 0.0, sigma = 1.0 )

}
